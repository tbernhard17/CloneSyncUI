import React, { useState, useRef } from "react";
import { Upload, Headphones, Mic, Edit, Download, Scissors } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { toast } from "@/components/ui/use-toast";
import axios from "axios";

// Function types for our button actions
type ButtonAction = () => void;

interface SidebarButtonProps {
  icon: React.ComponentType<any>;
  label: string;
  onClick: ButtonAction;
  progress?: number; // Progress value between 0-100
  disabled?: boolean;
}

interface SidebarProps {
  onEditScript?: () => void;
  videoFile?: File | null;
  audioFile?: File | null;
  currentVoiceModel?: string | null;
}

// API endpoint (replace with your actual backend URL)
const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";

const Sidebar = ({
  onEditScript,
  videoFile,
  audioFile,
  currentVoiceModel
}: SidebarProps) => {
  // State for tracking progress of different tasks
  const [uploadProgress, setUploadProgress] = useState(0);
  const [voiceProgress, setVoiceProgress] = useState(0);
  const [audioProgress, setAudioProgress] = useState(0);
  const [lipSyncProgress, setLipSyncProgress] = useState(0);
  const [scriptProgress, setScriptProgress] = useState(0);

  // Task IDs for checking status
  const [taskIds, setTaskIds] = useState({
    uploadTask: null,
    voiceTask: null,
    audioTask: null,
    lipSyncTask: null
  });

  // References for file inputs
  const videoInputRef = useRef<HTMLInputElement>(null);
  const voiceModelInputRef = useRef<HTMLInputElement>(null);
  const audioInputRef = useRef<HTMLInputElement>(null);

  // Task status polling
  const pollTaskStatus = async (taskId: string, progressSetter: React.Dispatch<React.SetStateAction<number>>) => {
    try {
      const interval = setInterval(async () => {
        const { data } = await axios.get(`${API_BASE_URL}/api/v1/tasks/${taskId}`);
        
        if (data.status === 'completed') {
          progressSetter(100);
          toast({
            title: "Task Completed",
            description: `Task ${taskId} has been completed successfully.`,
          });
          clearInterval(interval);
        } 
        else if (data.status === 'failed') {
          toast({
            title: "Task Failed",
            description: data.error || "An error occurred during the task.",
            variant: "destructive"
          });
          clearInterval(interval);
        } 
        else {
          // Update progress if available, otherwise increment slowly
          if (data.progress) {
            progressSetter(data.progress);
          } else {
            progressSetter(prev => Math.min(prev + 2, 95));
          }
        }
      }, 1000);
    } catch (error) {
      console.error("Error polling task status:", error);
      toast({
        title: "Error",
        description: "Failed to check task status",
        variant: "destructive"
      });
    }
  };

  // Handler functions for each button
  const handleUploadVideo = () => {
    if (videoInputRef.current) {
      videoInputRef.current.click();
    }
  };

  const handleVideoFileSelected = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    setUploadProgress(0);
    
    try {
      // Create form data for file upload
      const formData = new FormData();
      formData.append('file', file);
      
      // Upload the file
      const { data } = await axios.post(
        `${API_BASE_URL}/api/v1/upload/video`, 
        formData, 
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          },
          onUploadProgress: (progressEvent) => {
            const percentCompleted = Math.round((progressEvent.loaded * 100) / (progressEvent.total || 100));
            setUploadProgress(percentCompleted);
          }
        }
      );

      // If the upload was successful
      if (data.task_id) {
        setTaskIds(prev => ({ ...prev, uploadTask: data.task_id }));
        toast({
          title: "Upload Successful",
          description: "Video has been uploaded successfully.",
        });
        
        // Reset the file input
        e.target.value = '';
      }
    } catch (error) {
      console.error("Error uploading video:", error);
      setUploadProgress(0);
      toast({
        title: "Upload Failed",
        description: "There was an error uploading your video.",
        variant: "destructive"
      });
    }
  };

  const handleSelectVoice = () => {
    if (voiceModelInputRef.current) {
      voiceModelInputRef.current.click();
    }
  };

  const handleVoiceFileSelected = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    setVoiceProgress(0);
    
    try {
      // Create form data for file upload
      const formData = new FormData();
      formData.append('file', file);
      
      // Upload the voice model
      const { data } = await axios.post(
        `${API_BASE_URL}/api/v1/voice-models/upload`, 
        formData, 
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          },
          onUploadProgress: (progressEvent) => {
            const percentCompleted = Math.round((progressEvent.loaded * 100) / (progressEvent.total || 100));
            setVoiceProgress(percentCompleted);
          }
        }
      );

      if (data.task_id) {
        setTaskIds(prev => ({ ...prev, voiceTask: data.task_id }));
        // Start polling for task status
        pollTaskStatus(data.task_id, setVoiceProgress);
        toast({
          title: "Voice Model Upload",
          description: "Voice model is being processed.",
        });
        
        // Reset the file input
        e.target.value = '';
      }
    } catch (error) {
      console.error("Error uploading voice model:", error);
      setVoiceProgress(0);
      toast({
        title: "Voice Model Upload Failed",
        description: "There was an error uploading your voice model.",
        variant: "destructive"
      });
    }
  };

  const handleGenerateAudio = async () => {
    if (!currentVoiceModel) {
      toast({
        title: "No Voice Model Selected",
        description: "Please select a voice model first.",
        variant: "destructive"
      });
      return;
    }

    setAudioProgress(0);
    
    try {
      // Get the script text - this would normally come from your application state
      // For example, from the script editor component
      const scriptText = localStorage.getItem('currentScriptText') || "Hello, this is a test script for audio generation.";
      
      // Send request to generate audio
      const { data } = await axios.post(`${API_BASE_URL}/api/v1/tts/generate`, {
        text: scriptText,
        voice_id: currentVoiceModel
      });

      if (data.task_id) {
        setTaskIds(prev => ({ ...prev, audioTask: data.task_id }));
        // Start polling for task status
        pollTaskStatus(data.task_id, setAudioProgress);
        toast({
          title: "Audio Generation Started",
          description: "Your audio is being generated. This may take a few minutes.",
        });
      }
    } catch (error) {
      console.error("Error generating audio:", error);
      setAudioProgress(0);
      toast({
        title: "Audio Generation Failed",
        description: "There was an error generating your audio.",
        variant: "destructive"
      });
    }
  };

  const handleLipSync = async () => {
    if (!videoFile) {
      toast({
        title: "No Video Selected",
        description: "Please upload a video file first.",
        variant: "destructive"
      });
      return;
    }

    if (!audioFile && !taskIds.audioTask) {
      toast({
        title: "No Audio Available",
        description: "Please generate or upload audio before lip syncing.",
        variant: "destructive"
      });
      return;
    }

    setLipSyncProgress(0);
    
    try {
      // Send request to perform lip sync
      const { data } = await axios.post(`${API_BASE_URL}/api/v1/lipsync/sync`, {
        video_id: taskIds.uploadTask,
        audio_id: taskIds.audioTask,
        options: {
          method: "wav2lip", // or another method if available
          sync_factor: 0.8
        }
      });

      if (data.task_id) {
        setTaskIds(prev => ({ ...prev, lipSyncTask: data.task_id }));
        // Start polling for task status
        pollTaskStatus(data.task_id, setLipSyncProgress);
        toast({
          title: "Lip Sync Processing Started",
          description: "Your video is being processed for lip sync. This may take several minutes.",
        });
      }
    } catch (error) {
      console.error("Error during lip sync:", error);
      setLipSyncProgress(0);
      toast({
        title: "Lip Sync Failed",
        description: "There was an error processing your lip sync request.",
        variant: "destructive"
      });
    }
  };

  const handleEditScript = () => {
    // Call the parent component's handler to show the script editor
    if (onEditScript) {
      onEditScript();
    } else {
      toast({
        title: "Script Editor",
        description: "Opening script editor...",
      });
    }
  };

  const handleDownloadVideo = async () => {
    if (!taskIds.lipSyncTask) {
      toast({
        title: "No Completed Video",
        description: "Please complete the lip sync process before downloading.",
        variant: "destructive"
      });
      return;
    }

    try {
      // Get the video download URL
      const { data } = await axios.get(`${API_BASE_URL}/api/v1/outputs/${taskIds.lipSyncTask}/download`);
      
      if (data.download_url) {
        // Create a temporary anchor element to trigger download
        const a = document.createElement('a');
        a.href = data.download_url;
        a.download = data.filename || 'clonesync_output.mp4';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        
        toast({
          title: "Download Started",
          description: "Your video is being downloaded.",
        });
      }
    } catch (error) {
      console.error("Error downloading video:", error);
      toast({
        title: "Download Failed",
        description: "There was an error downloading your video.",
        variant: "destructive"
      });
    }
  };

  const buttons: SidebarButtonProps[] = [
    {
      icon: Upload,
      label: "Upload Video",
      onClick: handleUploadVideo,
      progress: uploadProgress
    },
    {
      icon: Mic,
      label: "Select Voice",
      onClick: handleSelectVoice,
      progress: voiceProgress
    },
    {
      icon: Headphones,
      label: "Generate Audio",
      onClick: handleGenerateAudio,
      progress: audioProgress,
      disabled: !currentVoiceModel && voiceProgress < 100
    },
    {
      icon: Scissors,
      label: "Lip Sync",
      onClick: handleLipSync,
      progress: lipSyncProgress,
      disabled: !taskIds.uploadTask || (!taskIds.audioTask && !audioFile)
    },
    {
      icon: Edit,
      label: "Edit Script",
      onClick: handleEditScript,
      progress: scriptProgress
    },
    {
      icon: Download,
      label: "Download Video",
      onClick: handleDownloadVideo,
      disabled: !taskIds.lipSyncTask || lipSyncProgress < 100
    }
  ];

  return (
    <div 
      className="bg-gradient-to-b from-[#7E22CE]/90 to-[#1E1B4B]/90 backdrop-blur-sm border-r border-white/20 shadow-[2px_0_30px_rgba(0,0,0,0.2)]" 
      style={{ 
        width: '160px', 
        minWidth: '160px', 
        maxWidth: '160px', 
        flexShrink: 0,
        paddingTop: '16px',
        height: '100%',
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center'
      }}
    >
      <div className="flex flex-col gap-24 p-3">
        {buttons.map(button => (
          <div key={button.label} className="flex flex-col gap-2">
            <Button 
              variant="secondary" 
              className={`w-full justify-start gap-1 whitespace-nowrap overflow-hidden text-ellipsis px-2 py-1 h-9 transition-colors shadow-sm text-sm font-normal ${button.disabled ? 'bg-gray-300 text-gray-600 cursor-not-allowed' : 'bg-gray-100 text-zinc-950 hover:bg-gray-200'}`}
              onClick={button.onClick}
              disabled={button.disabled}
            >
              <button.icon className="h-4 w-4 shrink-0 opacity-90" />
              <span className="truncate text-xs text-center">{button.label}</span>
            </Button>
            
            {/* Progress meter that appears only when there's progress */}
            {button.progress !== undefined && button.progress > 0 && (
              <div className="mt-2">
                <Progress value={button.progress} className="h-2 bg-white/20" indicatorClassName="bg-green-500" />
                <div className="text-xs text-white/70 mt-1 text-center">{button.progress}%</div>
              </div>
            )}
          </div>
        ))}
      </div>

      {/* Hidden file inputs */}
      <input 
        type="file" 
        ref={videoInputRef} 
        className="hidden" 
        accept="video/*" 
        onChange={handleVideoFileSelected} 
      />
      <input 
        type="file" 
        ref={voiceModelInputRef} 
        className="hidden" 
        accept=".pth,.bin,.model" 
        onChange={handleVoiceFileSelected} 
      />
      <input 
        type="file" 
        ref={audioInputRef} 
        className="hidden" 
        accept="audio/*"
        // Add handler if needed for direct audio upload
      />
    </div>
  );
};

export default Sidebar;